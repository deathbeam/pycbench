#!/usr/bin/env python

import json
import os
import sys

from argparse import ArgumentParser, FileType
from plotly.offline import plot
import plotly.graph_objs as go

def generate_plot(jsonResult, outputFile):
    runs = len(jsonResult)
    x = range(runs)
    minY = [0] * runs
    maxY = [0] * runs
    avgY = [0] * runs

    minLine = go.Scatter(
        x = x,
        y = [run['result']['min'] for run in jsonResult],
        mode = 'lines+markers',
        name = 'min'
    )

    maxLine = go.Scatter(
        x = x,
        y = [run['result']['max'] for run in jsonResult],
        mode = 'lines+markers',
        name = 'max'
    )

    avgLine = go.Scatter(
        x = x,
        y = [run['result']['avg'] for run in jsonResult],
        mode = 'lines+markers',
        name = 'avg'
    )

    layout = dict(
        title = 'CBench Performance',
        xaxis = dict(title = 'Run #'),
        yaxis = dict(title = 'Flows/s'),
    )

    data = [minLine, maxLine, avgLine]
    fig = dict(data=data, layout=layout)
    plot(fig, filename=outputFile)

def append_value(dictionary, key, val):
    if not key in dictionary: dictionary[key] = []
    dictionary[key].append(val)

def deep_search(needles, haystack, found={}):
    if type(needles) != type([]):
        needles = [needles]

    if type(haystack) == type(dict()):
        for needle in needles:
            if needle in haystack.keys():
                append_value(found, needle, haystack[needle])
            elif len(haystack.keys()) > 0:
                for key in haystack.keys():
                    deep_search(needle, haystack[key], found)
    elif type(haystack) == type([]):
        for node in haystack:
            deep_search(needles, node, found)

    return found

def format_json(jsonDict):
    return json.dumps(
            jsonDict,
            sort_keys=True,
            indent=4,
            separators=(',', ': '))

def run():
    parser = ArgumentParser()

    parser.add_argument('-k', '--key',
                        action='append', type=str,
                        help='Find key in result file')

    parser.add_argument('-i', '--infile',
                        nargs='?', type=FileType('r'), default=sys.stdin,
                        help='File from where we will load results (stdin)')

    parser.add_argument('-g', '--gen-graph',
                        nargs='?', const="graph.html", type=str,
                        help='If this parameter is specified, graph will be generated (graph.html)')

    a = parser.parse_args()
    jsonData = json.load(a.infile)
    a.infile.close()
    output = jsonData

    if a.key != None: output = deep_search(a.key, jsonData)
    if a.gen_graph != None: generate_plot(jsonData, a.gen_graph)
    print(format_json(output))

if __name__ == '__main__':
    run()
